snippet latex "minimal latex template" b
\documentclass{article}
\usepackage{amsmath, amssymb}

\title{$0}
\author{Dan Zou}
\date{\today}

\begin{document}
\end{document}
endsnippet

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal

snippet begin "begin{} / end{}" bA
\begin{$1}$2
	$0
\end{$1}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
    ${1:${VISUAL}}
\] $0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet != "equals" iA
\neq 
endsnippet

snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet sum "sum" w
\sum_{$1}^{$2} $3
endsnippet

snippet lim "limit" w
\lim_{$1 \to $2} 
endsnippet

snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

snippet => "implies" iA
\implies
endsnippet

snippet =< "implied by" iA
\impliedby
endsnippet

snippet thm "Theorem" b
\begin{theorem}
	$1
\end{theorem}
endsnippet

snippet proof "Proof" b
\begin{proof}
	$1
\end{proof}
endsnippet

snippet int "Integral" w
\int_{${1:0}}^{${2:\infty}}
endsnippet

snippet prod "Product" w
\prod_{${1:1}}^{${2:\infty}}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

snippet phi "phi" iA
\phi
endsnippet

snippet perp "perp" iA
^\perp
endsnippet

snippet xor "xor" iA
\oplus
endsnippet

snippet tens "tens" iA
\otimes
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1)`}
endsnippet

snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1)`}
endsnippet

priority 101
snippet "\<(.*?)\|(.*?)\>" "braketraw" ri
\ip{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}
endsnippet

priority 101
snippet "\|(.*?)\>\<(.*?)\|" "ketbraraw" ri
\op{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}
endsnippet

snippet "\\bra{(.*?)}\\ket{(.*?)}" "braket" riA
\ip{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}
endsnippet

snippet "\\bra{(.*?)}(.*?)\>" "braket2" riA
\ip{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}
endsnippet

snippet "\\ket{(.*?)}\\bra{(.*?)}" "ketbra" riA
\op{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet ul "unline" iA
\ul{$1}$0
endsnippet

context "math()"
snippet ^ "supexp" iA
^{$1}$0
endsnippet

priority 102
context "math()"
snippet "\((+*?)\)\^" "supexpp" riA
{(`!p snip.rv = match.group(1)`)}^{$1}$0
endsnippet

context "math()"
snippet __ "subsub" iA
_{$1}$0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

